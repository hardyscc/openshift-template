apiVersion: template.openshift.io/v1
kind: Template
labels:
  createdBy: gitlab-runner-template
metadata:
  name: gitlab-runner
  annotations:
    description: |
      GitLab Runner Service.
      It uses GitLab Runner image from official repository at docker hub.
      https://hub.docker.com/r/gitlab/gitlab-runner/
      Before you start, please setup Security Context Constraints (SCC) for service accounts used for running
      containers
        oc login -u system:admin
        oc adm policy add-scc-to-user privileged -z gitlab-runner-user -n CURRENT_PROJECT_NAME
    iconClass: "fa fa-git"
    tags: "gitlab,CI"
parameters:
  - description: "The name for the application. The service will be named like the application."
    displayName: "Application name."
    name: APPLICATION_NAME
    value: "gitlab-runner"
    required: true
  - description: "URL that GitLab can be reached at"
    displayName: "GitLab URL"
    name: GITLAB_URL
    required: true
  - description: "Runner Registration Token from the GitLab app"
    displayName: "Registration Token."
    name: REGISTRATION_TOKEN
    required: true
  - description: "URL that GitLab registry can be reached at"
    displayName: "GitLab Registry URL"
    name: GITLAB_REGISTRY_URL
    required: true
  - description: Custom username or access key of 5 to 20 characters in length.
    displayName: Minio Cloud Storage Access Key
    name: MINIO_ACCESS_KEY
    from: "[a-zA-Z0-9]{20}"
    generate: expression
  - description: Custom password or secret key of 8 to 40 characters in length.
    displayName: Minio Cloud Storage Secret Key
    name: MINIO_SECRET_KEY
    from: "[a-zA-Z0-9]{40}"
    generate: expression
  - description: "Http Proxy"
    displayName: "Http Proxy"
    name: HTTP_PROXY
    required: false
  - description: "Https Proxy"
    displayName: "Https Proxy"
    name: HTTPS_PROXY
    required: false
  - description: "Ftp Proxy"
    displayName: "Ftp Proxy"
    name: FTP_PROXY
    required: false
  - description: "No Proxy"
    displayName: "No Proxy"
    name: NO_PROXY
    required: false

objects:
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: gitlab-runner
      labels:
        app: ${APPLICATION_NAME}
    spec:
      tags:
        - name: v11.11.1
          from:
            kind: DockerImage
            name: gitlab/gitlab-runner:v11.11.1

  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}-scripts
      labels:
        app: ${APPLICATION_NAME}
    data:
      entrypoint: |
        #!/bin/bash
        set -xe
        cp /scripts/config.toml /etc/gitlab-runner/
        # import root ca cert
        # cp /scripts/ca.crt /usr/local/share/ca-certificates/
        # update-ca-certificates
        # Register the runner
        /entrypoint register --non-interactive \
          --url $GITLAB_URL \
          --run-untagged \
          --kubernetes-privileged \
          --registration-token $REGISTRATION_TOKEN \
          --name "k8s_runner" \
          --executor kubernetes \
          --env HTTP_PROXY="$HTTP_PROXY" \
          --env http_proxy="$HTTP_PROXY" \
          --env HTTPS_PROXY="$HTTPS_PROXY" \
          --env https_proxy="$HTTPS_PROXY" \
          --env FTP_PROXY="$FTP_PROXY" \
          --env ftp_proxy="$FTP_PROXY" \
          --env NO_PROXY="$NO_PROXY" \
          --env no_proxy="$NO_PROXY"
        # Add minio config
        sed -i '/\[runners.cache\]/a\
            Type = "s3"\
            Shared = true' /etc/gitlab-runner/config.toml
        sed -i '/\[runners.cache.s3\]/a\
              ServerAddress = "'$MINIO_URL'"\
              AccessKey = "'$MINIO_ACCESS_KEY'"\
              SecretKey = "'$MINIO_SECRET_KEY'"\
              BucketName = "gitlab-runner-cache"\
              Insecure = true' /etc/gitlab-runner/config.toml
        # Start the runner
        /entrypoint run --user=gitlab-runner \
          --working-directory=/home/gitlab-runner

      config.toml: |
        concurrent = 10
        check_interval = 10

      # ca.crt: |
      #   -----BEGIN CERTIFICATE-----
      #   ...
      #   -----END CERTIFICATE-----

  - kind: ServiceAccount
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}-user
      labels:
        app: ${APPLICATION_NAME}

  - kind: RoleBinding
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}-edit
      labels:
        app: ${APPLICATION_NAME}
    subjects:
      - kind: ServiceAccount
        name: ${APPLICATION_NAME}-user
    roleRef:
      name: edit

  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - gitlab-runner
            from:
              kind: ImageStreamTag
              name: gitlab-runner:v11.11.1
      replicas: 1
      test: false
      selector:
        app: ${APPLICATION_NAME}
        deploymentconfig: ${APPLICATION_NAME}
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
            deploymentconfig: ${APPLICATION_NAME}
        spec:
          volumes:
            - name: scripts
              configMap:
                name: ${APPLICATION_NAME}-scripts
          containers:
            - name: gitlab-runner
              image: gitlab-runner
              command: ["/bin/bash", "/scripts/entrypoint"]
              ports:
                - containerPort: 22
                  protocol: TCP
                - containerPort: 80
                  protocol: TCP
              env:
                - name: GITLAB_URL
                  value: ${GITLAB_URL}
                - name: REGISTRATION_TOKEN
                  value: ${REGISTRATION_TOKEN}
                - name: GITLAB_REGISTRY_URL
                  value: ${GITLAB_REGISTRY_URL}
                - name: MINIO_ACCESS_KEY
                  value: ${MINIO_ACCESS_KEY}
                - name: MINIO_SECRET_KEY
                  value: ${MINIO_SECRET_KEY}
                - name: MINIO_URL
                  value: ${APPLICATION_NAME}-cache
                - name: KUBERNETES_PRIVILEGED
                  value: "true"
                - name: KUBERNETES_IMAGE
                  value: "ubuntu:16.04"
                - name: KUBERNETES_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: "metadata.namespace"
                - name: HTTP_PROXY
                  value: ${HTTP_PROXY}
                - name: HTTPS_PROXY
                  value: ${HTTPS_PROXY}
                - name: FTP_PROXY
                  value: ${FTP_PROXY}
                - name: NO_PROXY
                  value: ${NO_PROXY}
              resources:
                requests:
                  cpu: 100m
                  memory: 500Mi
                limits:
                  cpu: 600m
                  memory: 600Mi
              volumeMounts:
                - name: scripts
                  mountPath: /scripts
              readinessProbe:
                exec:
                  command: ["/usr/bin/pgrep", "gitlab-runner"]
                initialDelaySeconds: 10
              livenessProbe:
                exec:
                  command: ["/usr/bin/pgrep", "gitlab-runner"]
                initialDelaySeconds: 60
              terminationMessagePath: /dev/termination-log
              imagePullPolicy: IfNotPresent
              securityContext:
                privileged: true
                runAsUser: 0
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          serviceAccount: ${APPLICATION_NAME}-user

  ### minio integration for cache
  - apiVersion: v1
    kind: ImageStream
    metadata:
      name: minio
      labels:
        app: ${APPLICATION_NAME}
    spec:
      tags:
        - name: 2019-06-04
          from:
            kind: DockerImage
            name: minio/minio:RELEASE.2019-06-04T01-15-58Z

  - apiVersion: v1
    kind: Service
    metadata:
      name: ${APPLICATION_NAME}-cache
      labels:
        app: ${APPLICATION_NAME}
    spec:
      type: ClusterIP
      ports:
        - name: http
          nodePort: 0
          port: 80
          protocol: TCP
          targetPort: 9000
      selector:
        app: ${APPLICATION_NAME}
        deploymentconfig: ${APPLICATION_NAME}-cache

  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: ${APPLICATION_NAME}-cache
      labels:
        app: ${APPLICATION_NAME}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi

  - apiVersion: v1
    kind: DeploymentConfig
    metadata:
      name: ${APPLICATION_NAME}-cache
      labels:
        app: ${APPLICATION_NAME}
    spec:
      replicas: 1
      selector:
        app: ${APPLICATION_NAME}
        deploymentconfig: ${APPLICATION_NAME}-cache
      strategy:
        type: Recreate
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - minio
            from:
              kind: ImageStreamTag
              name: minio:2019-06-04
      template:
        metadata:
          labels:
            app: ${APPLICATION_NAME}
            deploymentconfig: ${APPLICATION_NAME}-cache
        spec:
          containers:
            - name: minio
              ports:
                - containerPort: 9000
                  name: http
                  protocol: TCP
              env:
                - name: MINIO_ACCESS_KEY
                  value: ${MINIO_ACCESS_KEY}
                - name: MINIO_SECRET_KEY
                  value: ${MINIO_SECRET_KEY}
              command:
                - /bin/sh
                - "-c"
                - >-
                  /bin/mkdir -p /storage/gitlab-runner-cache; 
                  /usr/bin/minio server /storage
              resources:
                requests:
                  cpu: 100m
                  memory: 500Mi
                limits:
                  cpu: 100m
                  memory: 500Mi
              volumeMounts:
                - name: storage
                  mountPath: /storage
              readinessProbe:
                exec:
                  command: ["/usr/bin/pgrep", "minio"]
                initialDelaySeconds: 5
                timeoutSeconds: 1
              livenessProbe:
                tcpSocket:
                  port: 9000
                initialDelaySeconds: 15
                timeoutSeconds: 10
              terminationMessagePath: /dev/termination-log
              imagePullPolicy: IfNotPresent
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          volumes:
            - name: storage
              persistentVolumeClaim:
                claimName: ${APPLICATION_NAME}-cache
