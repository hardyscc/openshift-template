-----------------------------------------------------------------------------------------------------------------
# install centos 7 minimum
1. set timezone & date time 
2. enable network & set hostname
3. create user account & make it as administrator

-----------------------------------------------------------------------------------------------------------------
# copy ssh public key over to server
ssh-copy-id -i ~/.ssh/id_rsa.pub $USER@$DOMAIN

# ssh to server and become root
ssh $USER@$DOMAIN
sudo -i

# add sudoers
echo '$USER ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/$USER

# set locale under /etc/environment
cat << EOF >> /etc/environment
LANGUAGE="en_US.UTF-8"
LC_ALL="en_US.UTF-8"
EOF

# set proxy under /etc/environment (only if required)
cat << EOF >> /etc/environment
http_proxy="$HTTP_PROXY"
https_proxy="$HTTP_PROXY"
no_proxy="localhost,127.0.0.1,localaddress,.localdomain.com,.cluster.local,.svc,172.30.0.1,.$DOMAIN"
EOF

# update system
yum -y update

-----------------------------------------------------------------------------------------------------------------
# install certbot
yum -y install epel-release 
yum -y install certbot

# generate certificates
certbot certonly --manual \
        --preferred-challenges dns \
        -d $DOMAIN \
        -d *.$DOMAIN \
        -d *.apps.$DOMAIN

-----------------------------------------------------------------------------------------------------------------
# install git
yum -y install git

# set proxy (only if required)
git config --global --add http.proxy "$HTTP_PROXY"

# install openshift
git clone https://github.com/hardyscc/installcentos.git
cd installcentos
./install-openshift.sh

-----------------------------------------------------------------------------------------------------------------
# uninstall if any failure occur then retry installation
ansible-playbook -i inventory.ini openshift-ansible/playbooks/adhoc/uninstall.yml

-----------------------------------------------------------------------------------------------------------------
# create openshift user
htpasswd /etc/origin/master/htpasswd $USER
oc create user $USER
oc create identity htpasswd_auth:$USER
oc create useridentitymapping htpasswd_auth:$USER $USER

-----------------------------------------------------------------------------------------------------------------
# enable anyuid access for whole cluster (required for heroku image)
oc adm policy add-scc-to-group anyuid system:authenticated

-----------------------------------------------------------------------------------------------------------------
# install gitlab
oc new-project gitlab
oc create -f https://raw.githubusercontent.com/hardyscc/openshift-template/master/gitlab-template.yaml
oc adm policy add-scc-to-user privileged -z gitlab-ce-user
oc create secret generic gitlab-cert -n gitlab \
  --from-file=gitlab.crt=/etc/letsencrypt/live/$DOMAIN/fullchain.pem \
  --from-file=gitlab.key=/etc/letsencrypt/live/$DOMAIN/privkey.pem \
  --from-file=registry.crt=/etc/letsencrypt/live/$DOMAIN/fullchain.pem \
  --from-file=registry.key=/etc/letsencrypt/live/$DOMAIN/privkey.pem
oc new-app gitlab-ce -p APPLICATION_DOMAIN=$DOMAIN
oc rollout status deploymentconfig gitlab-ce

-----------------------------------------------------------------------------------------------------------------
# install gitlab runner
## Goto https://gitlab.$DOMAIN:8443/
## lookup the gitlab runner REGISTRATION_TOKEN under Overview > Runners

oc new-project gitlab-runner
oc create -f https://raw.githubusercontent.com/hardyscc/openshift-template/master/gitlab-runner-template.yaml
oc adm policy add-scc-to-user privileged -z gitlab-runner-user 
oc new-app gitlab-runner -p GITLAB_URL=https://gitlab.$DOMAIN/ \
  -p REGISTRATION_TOKEN="$REGISTRATION_TOKEN" \
  -p GITLAB_REGISTRY_URL=registry.$DOMAIN \
  -p HTTP_PROXY="$HTTP_PROXY" \
  -p HTTPS_PROXY="$HTTP_PROXY" \
  -p NO_PROXY="localhost,127.0.0.1,localaddress,.localdomain.com,.cluster.local,.svc,172.30.0.1,.$DOMAIN"
oc rollout status deploymentconfig gitlab-runner

-----------------------------------------------------------------------------------------------------------------
# login as normal user
oc login -u $USER https://console.$DOMAIN:8443/

# install tiller 
export TILLER_NAMESPACE=$PROJECT
oc new-project $PROJECT
oc process -f https://github.com/openshift/origin/raw/master/examples/helm/tiller-template.yaml \
  -p TILLER_NAMESPACE="$PROJECT" -p HELM_VERSION=v2.11.0 | oc apply -f -
oc policy add-role-to-user admin -z tiller
oc rollout status deployment tiller

-----------------------------------------------------------------------------------------------------------------
# Gitlab administration config: (login as root)

1. Overview > Users - Add User $USER
2. Settings > CI/CD > Continuous Integration and Deployment - set Auto devops domain as apps.$DOMAIN

-----------------------------------------------------------------------------------------------------------------
# Gitlab project config: (login as $USER)
## look up KUBE_TOKEN using
## > oc project $PROJECT
## > oc describe secret (oc describe serviceaccount tiller | grep 'tiller-token' | head -n 1 | awk '{print $1}')

1. Operations > Kubernetes > Add Existing cluster
   - Kubernetes cluster name: openshift
   - API URL: https://console.$DOMAIN:8443/
   - Token: $KUBE_TOKEN
   - Project namespace: $PROJECT
   - RBAC-enabled cluster: true
2. Settings > CI/CD > Variables 
  AUTO_DEVOPS_CHART_REPOSITORY=https://raw.githubusercontent.com/hardyscc/openshift-charts/master
  CODE_QUALITY_DISABLED=true
  GITLAB_FEATURES=license_management,sast,dependency_scanning,container_scanning,dast,review,stop_review

-----------------------------------------------------------------------------------------------------------------
# patches required for .gitlab-ci.yml

1. replace 'docker:6060' to 'localhost:6060'
2. add 'apk add -U wget ca-certificates' before 'wget -O gitlab-exporter/index.js ...' 
3. replace 'https://charts.gitlab.io' to 'https://raw.githubusercontent.com/hardyscc/openshift-charts/master' (gitlab version < 11.7)

-----------------------------------------------------------------------------------------------------------------
# Notes :

# create a cluster-admin service account for tiller 
oc project kube-system
oc create serviceaccount tiller
oc create clusterrolebinding tiller \
  --clusterrole=cluster-admin \
  --serviceaccount=kube-system:tiller

# get the token
oc project kube-system
oc describe secret (oc describe serviceaccount tiller | grep 'tiller-token' | head -n 1 | awk '{print $1}')